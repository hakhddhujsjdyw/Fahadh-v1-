
# pyrogram imports
from pyrogram.types import Message
from pyrogram import Client, filters
from pyrogram.errors import FloodWait, InputUserDeactivated, UserIsBlocked, PeerIdInvalid

# bots imports
import os, sys, time, asyncio, logging, datetime, pytz
from RknDeveloper.database import rkn_botz
from configs import rkn1


@Client.on_message(filters.command(["stats", "status"]) & filters.user(rkn1.ADMIN))
async def get_stats(bot, message):
    total_users = await rkn_botz.total_users_count()
    total_chats = await rkn_botz.total_chats_count()
    uptime = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - bot.uptime))    
    start_t = time.time()
    rkn = await message.reply('**·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢.....**')    
    end_t = time.time()
    time_taken_s = (end_t - start_t) * 1000
    await rkn.edit(text=f"**--B·¥è·¥õ S·¥õ·¥Ä·¥õ·¥úÍú±--** \n\n**‚åöÔ∏è B·¥è·¥õ U·¥©·¥õ…™·¥ç·¥á:** {uptime} \n**üêå C·¥ú Ä Ä·¥á…¥·¥õ P…™…¥…¢:** `{time_taken_s:.3f} ·¥çÍú±` \n**üë≠ T·¥è·¥õ·¥Ä ü UÍú±·¥á ÄÍú±:** `{total_users}`\n**üí∏ ·¥õ·¥è·¥õ·¥Ä ü Chats:** `{total_chats}`")

# Restart to cancell all process 
@Client.on_message(filters.private & filters.command("restart") & filters.user(rkn1.ADMIN))
async def restart_bot(b, m):
    rkn = await b.send_message(text="**üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss·¥ás s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö.  ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢.....**", chat_id=m.chat.id)
    failed = 0
    success = 0
    deactivated = 0
    blocked = 0
    start_time = time.time()
    total_users = await rkn_botz.total_users_count()
    all_users = await rkn_botz.get_all_users()
    async for user in all_users:
        try:
            restart_msg = f" ú·¥á è, {(await b.get_users(user['_id'])).mention}\n\n**üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss·¥ás s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö.  ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢.....\n\n‚úÖÔ∏è  ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö. …¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á.**"
            await b.send_message(user['_id'], restart_msg)
            success += 1
        except InputUserDeactivated:
            deactivated +=1
            await rkn_botz.delete_user(user['_id'])
        except UserIsBlocked:
            blocked +=1
            await rkn_botz.delete_user(user['_id'])
        except Exception as e:
            failed += 1
            await rkn_botz.delete_user(user['_id'])
            print(e)
            pass
        try:
            await rkn.edit(f"<u> Ä·¥ás·¥õ·¥Ä Ä·¥õ …™…¥ ·¥© Ä·¥è…¢ Ä·¥áÍú±Íú±:</u>\n\n‚Ä¢ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs: {total_users}\n‚Ä¢ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: {success}\n‚Ä¢  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs: {blocked}\n‚Ä¢ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs: {deactivated}\n‚Ä¢ ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: {failed}")
        except FloodWait as e:
            await asyncio.sleep(e.value)
    completed_restart = datetime.timedelta(seconds=int(time.time() - start_time))
    await rkn.edit(f"·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  Ä·¥ás·¥õ·¥Ä Ä·¥õ: {completed_restart}\n\n‚Ä¢ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs: {total_users}\n‚Ä¢ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: {success}\n‚Ä¢  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs: {blocked}\n‚Ä¢ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs: {deactivated}\n‚Ä¢ ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: {failed}")
    os.execl(sys.executable, sys.executable, *sys.argv)
    
    
@Client.on_message(filters.command("broadcast") & filters.user(rkn1.ADMIN) & filters.reply)
async def broadcast_handler(bot: Client, m: Message):
    await bot.send_message(rkn1.LOG_CHANNEL, f"{m.from_user.mention} or {m.from_user.id} IÍú± Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú·¥á B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ......")
    all_users = await rkn_botz.get_all_users()
    broadcast_msg = m.reply_to_message
    sts_msg = await m.reply_text("B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö..!") 
    done = 0
    failed = 0
    success = 0
    start_time = time.time()
    total_users = await rkn_botz.total_users_count()
    async for user in all_users:
        sts = await send_msg(user['_id'], broadcast_msg)
        if sts == 200:
           success += 1
        else:
           failed += 1
        if sts == 400:
           await rkn_botz.delete_user(user['_id'])
        done += 1
        if not done % 20:
           await sts_msg.edit(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ I…¥ P Ä·¥è…¢ Ä·¥áÍú±Íú±: \nT·¥è·¥õ·¥Ä ü UÍú±·¥á ÄÍú± {total_users} \nC·¥è·¥ç·¥© ü·¥á·¥õ·¥á·¥Ö: {done} / {total_users}\nS·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±: {success}\nF·¥Ä…™ ü·¥á·¥Ö: {failed}")
    completed_in = datetime.timedelta(seconds=int(time.time() - start_time))
    await sts_msg.edit(f"B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ C·¥è·¥ç·¥© ü·¥á·¥õ·¥á·¥Ö: \nC·¥è·¥ç·¥© ü·¥á·¥õ·¥á·¥Ö I…¥ `{completed_in}`.\n\nT·¥è·¥õ·¥Ä ü UÍú±·¥á ÄÍú± {total_users}\nC·¥è·¥ç·¥© ü·¥á·¥õ·¥á·¥Ö: {done} / {total_users}\nS·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±: {success}\nF·¥Ä…™ ü·¥á·¥Ö: {failed}")
           
async def send_msg(user_id, message):
    try:
        await message.copy(chat_id=int(user_id))
        return 200
    except FloodWait as e:
        await asyncio.sleep(e.value)
        return send_msg(user_id, message)
    except InputUserDeactivated:
        logger.info(f"{user_id} : D·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö")
        return 400
    except UserIsBlocked:
        logger.info(f"{user_id} : B ü·¥è·¥Ñ·¥ã·¥á·¥Ö T ú·¥á B·¥è·¥õ")
        return 400
    except PeerIdInvalid:
        logger.info(f"{user_id} : UÍú±·¥á Ä I·¥Ö I…¥·¥†·¥Ä ü…™·¥Ö")
        return 400
    except Exception as e:
        logger.error(f"{user_id} : {e}")
        return 500
        

# Rkn Developer 
# Don't Remove Credit üòî
# Telegram Channel @RknDeveloper & @Rkn_Botz
# Developer @RknDeveloperr
# Update Channel @Digital_Botz & @DigitalBotz_Support
